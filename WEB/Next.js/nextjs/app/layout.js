
import { Crud } from './Crud'
import './globals.css'
import Link from 'next/link'



// a태그를 사용하면 링크를 누를때마다 페이지를 처음부터 다 다운받지만
// Link를 사용하면 링크를 누르기전에 백그라운드에 페이지를 다운로드 받아놓고 나중에 들어갈때는 다시 다운받거나 하지않기 때문에 속도가 더 빠르다
// 하나의 페이지에서 모든 작업을 처리하는 앱을 의미합니다. 서버로부터 가져올 데이터가 있다면 ajax와 같은 방법을 통해서 동적으로 로딩합니다. 이것을 SPA(single page application)이라고 합니다

// useEffect 함수는 컴포넌트가 렌더링될때마다 특정작업을 할수 있게 해주는 HOOK이다
// useEffect는 컴포넌트가 마운트,언마운트,업데이트 됐을때 특정 작업을 처리할수 있다.

// 자바스크립트의 비동기처리란 데이터를 요청해서 받아오고 있는데 기다리지도 않고 다음코드를 처리한것이다. 콜백함수를 통해 해결가능하다

export const metadata = {
  title: '웹 공부',
  description: 'generated by foskingson',
}

export default async function RootLayout({ children }) { 
 // const [topic,setTopic]=useState([]);  // 주석처리된건 클라이언트 컴포넌트 기준으로 짜여진 코드
 // useEffect(()=>{
    //fetch('http://localhost:9999/topics') // 받아오면 아래거 실행
   // .then(resp=>resp.json())  
   // .then(result=>{
  //  setTopic(result);
 //   });
 // },[])
  const resp=await fetch(process.env.API_URL+'topics' , {cache:'no-cache'}) // 주소에서 받아올때까지 기다림(await) 끝나면 다음코드 실행 + 목록갱신을 위해 캐쉬를 사용하지 않음
  const topic=await resp.json();

  return (
    <html>
      <body >
        <h1><a href='/'>WEB</a></h1>

        <ol>
          {topic.map(topic=>{
              return <li key={topic.id}> <Link href={`/read/${topic.id}`}>{topic.title} </Link></li> // 문자열과 변수가 같이 들어갈때는 (') 작은 따옴표 사용을하면 열고 닫으며 +를 
                                                                                                     //해야하기 때문에 불편하다 따라서 (') 백틱으로 감싼후 변수앞에 $붙이고 {}로 감싼다.
              
            
          })}                                                                                        
        </ol>
        {children}
        <Crud/>
        
        </body>
    </html>
  )
}
